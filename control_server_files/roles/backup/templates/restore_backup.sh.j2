#!/bin/bash
# Backup Restore Script for Note-Taking App
# Restores database and application from backups

set -e

# Configuration
APP_DIR="{{ app_dir }}"
BACKUP_DIR="{{ app_dir }}/backups"
LOG_FILE="{{ app_dir }}/logs/restore.log"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

# Usage function
show_usage() {
    echo "Usage: $0 [database|application] [backup_file]"
    echo
    echo "Examples:"
    echo "  $0 database notes_backup_20241201_120000.db"
    echo "  $0 application noteapp_full_backup_20241201_120000.tar.gz"
    echo "  $0 database latest  # Restore latest database backup"
    echo
}

# Logging function
log_message() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" >> "$LOG_FILE"
    echo -e "$1"
}

# Restore database function
restore_database() {
    local backup_file="$1"
    local db_backup_dir="$BACKUP_DIR/database"
    
    if [ "$backup_file" = "latest" ]; then
        backup_file=$(ls -t "$db_backup_dir"/notes_backup_*.db 2>/dev/null | head -1)
        if [ -z "$backup_file" ]; then
            log_message "${RED}[ERROR] No database backups found${NC}"
            exit 1
        fi
        backup_file=$(basename "$backup_file")
    fi
    
    local backup_path="$db_backup_dir/$backup_file"
    
    if [ ! -f "$backup_path" ]; then
        log_message "${RED}[ERROR] Backup file not found: $backup_path${NC}"
        exit 1
    fi
    
    # Stop application
    log_message "${YELLOW}[INFO] Stopping application...${NC}"
    sudo systemctl stop noteapp || true
    
    # Backup current database
    if [ -f "{{ sqlite_db_path }}" ]; then
        log_message "${YELLOW}[INFO] Backing up current database...${NC}"
        cp "{{ sqlite_db_path }}" "{{ sqlite_db_path }}.pre-restore.$(date +%Y%m%d_%H%M%S)"
    fi
    
    # Restore database
    log_message "${YELLOW}[INFO] Restoring database from: $backup_file${NC}"
    cp "$backup_path" "{{ sqlite_db_path }}"
    chown {{ app_user }}:{{ app_user }} "{{ sqlite_db_path }}"
    chmod 664 "{{ sqlite_db_path }}"
    
    # Start application
    log_message "${YELLOW}[INFO] Starting application...${NC}"
    sudo systemctl start noteapp
    
    log_message "${GREEN}[SUCCESS] Database restore completed${NC}"
}

# Restore application function
restore_application() {
    local backup_file="$1"
    local app_backup_dir="$BACKUP_DIR/application"
    
    if [ "$backup_file" = "latest" ]; then
        backup_file=$(ls -t "$app_backup_dir"/noteapp_full_backup_*.tar.gz 2>/dev/null | head -1)
        if [ -z "$backup_file" ]; then
            log_message "${RED}[ERROR] No application backups found${NC}"
            exit 1
        fi
        backup_file=$(basename "$backup_file")
    fi
    
    local backup_path="$app_backup_dir/$backup_file"
    
    if [ ! -f "$backup_path" ]; then
        log_message "${RED}[ERROR] Backup file not found: $backup_path${NC}"
        exit 1
    fi
    
    # Stop services
    log_message "${YELLOW}[INFO] Stopping services...${NC}"
    sudo systemctl stop noteapp httpd || true
    
    # Extract backup
    log_message "${YELLOW}[INFO] Extracting backup: $backup_file${NC}"
    cd "$app_backup_dir"
    tar -xzf "$backup_file"
    
    local extracted_dir=$(basename "$backup_file" .tar.gz)
    
    # Restore application files
    log_message "${YELLOW}[INFO] Restoring application files...${NC}"
    if [ -d "$extracted_dir/app" ]; then
        cp -r "$extracted_dir/app"/* "$APP_DIR/app/"
    fi
    
    # Restore database
    if [ -f "$extracted_dir/notes.db" ]; then
        log_message "${YELLOW}[INFO] Restoring database...${NC}"
        cp "$extracted_dir/notes.db" "{{ sqlite_db_path }}"
    fi
    
    # Restore configuration
    if [ -d "$extracted_dir/config" ]; then
        log_message "${YELLOW}[INFO] Restoring configuration...${NC}"
        [ -f "$extracted_dir/config/noteapp.service" ] && sudo cp "$extracted_dir/config/noteapp.service" /etc/systemd/system/
        [ -f "$extracted_dir/config/noteapp.conf" ] && sudo cp "$extracted_dir/config/noteapp.conf" /etc/httpd/conf.d/
    fi
    
    # Fix permissions
    log_message "${YELLOW}[INFO] Fixing permissions...${NC}"
    sudo chown -R {{ app_user }}:{{ app_user }} "$APP_DIR"
    sudo chmod 664 "{{ sqlite_db_path }}"
    
    # Reload systemd and start services
    log_message "${YELLOW}[INFO] Starting services...${NC}"
    sudo systemctl daemon-reload
    sudo systemctl start httpd noteapp
    
    # Cleanup extracted files
    rm -rf "$extracted_dir"
    
    log_message "${GREEN}[SUCCESS] Application restore completed${NC}"
}

# Main script
if [ $# -lt 2 ]; then
    show_usage
    exit 1
fi

RESTORE_TYPE="$1"
BACKUP_FILE="$2"

case "$RESTORE_TYPE" in
    database)
        restore_database "$BACKUP_FILE"
        ;;
    application)
        restore_application "$BACKUP_FILE"
        ;;
    *)
        log_message "${RED}[ERROR] Invalid restore type: $RESTORE_TYPE${NC}"
        show_usage
        exit 1
        ;;
esac 