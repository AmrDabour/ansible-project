#!/bin/bash
# Application Backup Script for Note-Taking App
# Complete backup of application files, configuration, and data

set -e

# Configuration
APP_DIR="{{ app_dir }}"
BACKUP_BASE="{{ app_dir }}/backups/application"
TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
BACKUP_NAME="noteapp_full_backup_${TIMESTAMP}"
BACKUP_PATH="${BACKUP_BASE}/${BACKUP_NAME}"
LOG_FILE="{{ app_dir }}/logs/backup.log"

# Colors for output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
NC='\033[0m'

# Logging function
log_message() {
    echo "$(date '+%Y-%m-%d %H:%M:%S') - $1" >> "$LOG_FILE"
    echo -e "$1"
}

# Create backup directory
mkdir -p "$BACKUP_PATH"

log_message "${YELLOW}[INFO] Starting full application backup...${NC}"

# Backup application files
log_message "${YELLOW}[INFO] Backing up application files...${NC}"
cp -r "$APP_DIR/app" "$BACKUP_PATH/"

# Backup database (use the database backup script)
log_message "${YELLOW}[INFO] Backing up database...${NC}"
if [ -f "{{ sqlite_db_path }}" ]; then
    cp "{{ sqlite_db_path }}" "$BACKUP_PATH/notes.db"
    log_message "${GREEN}[SUCCESS] Database backed up${NC}"
else
    log_message "${YELLOW}[WARNING] Database not found, skipping${NC}"
fi

# Backup configuration files
log_message "${YELLOW}[INFO] Backing up configuration...${NC}"
mkdir -p "$BACKUP_PATH/config"

# Backup systemd service file
if [ -f "/etc/systemd/system/noteapp.service" ]; then
    cp "/etc/systemd/system/noteapp.service" "$BACKUP_PATH/config/"
fi

# Backup Apache configuration
if [ -f "/etc/httpd/conf.d/noteapp.conf" ]; then
    cp "/etc/httpd/conf.d/noteapp.conf" "$BACKUP_PATH/config/"
fi

# Backup logs (last 30 days)
log_message "${YELLOW}[INFO] Backing up recent logs...${NC}"
mkdir -p "$BACKUP_PATH/logs"
find "$APP_DIR/logs" -name "*.log" -mtime -30 -exec cp {} "$BACKUP_PATH/logs/" \; 2>/dev/null || true

# Create backup manifest
log_message "${YELLOW}[INFO] Creating backup manifest...${NC}"
cat > "$BACKUP_PATH/BACKUP_MANIFEST.txt" << EOF
Note-Taking App Full Backup
===========================
Backup Date: $(date)
Backup Version: 1.0
Application User: {{ app_user }}
Application Directory: $APP_DIR

Contents:
- app/: Complete application source code
- notes.db: SQLite database backup
- config/: System configuration files
- logs/: Application logs (last 30 days)

Restore Instructions:
1. Stop the application: sudo systemctl stop noteapp httpd
2. Restore files to $APP_DIR
3. Restore configuration files to system locations
4. Fix permissions: sudo chown -R {{ app_user }}:{{ app_user }} $APP_DIR
5. Start services: sudo systemctl start httpd noteapp

Generated on: $(hostname)
EOF

# Create compressed archive
log_message "${YELLOW}[INFO] Creating compressed archive...${NC}"
cd "$BACKUP_BASE"
tar -czf "${BACKUP_NAME}.tar.gz" "$BACKUP_NAME"

if [ $? -eq 0 ]; then
    # Remove uncompressed backup
    rm -rf "$BACKUP_NAME"
    
    # Get backup size
    BACKUP_SIZE=$(du -h "${BACKUP_NAME}.tar.gz" | cut -f1)
    log_message "${GREEN}[SUCCESS] Compressed backup created: ${BACKUP_NAME}.tar.gz${NC}"
    log_message "${GREEN}[INFO] Backup size: $BACKUP_SIZE${NC}"
else
    log_message "${RED}[ERROR] Failed to create compressed backup${NC}"
    exit 1
fi

# Cleanup old backups (keep last 4 weekly backups)
log_message "${YELLOW}[INFO] Cleaning up old application backups...${NC}"
find "$BACKUP_BASE" -name "noteapp_full_backup_*.tar.gz" -type f -mtime +28 -delete

# Count remaining backups
BACKUP_COUNT=$(find "$BACKUP_BASE" -name "noteapp_full_backup_*.tar.gz" -type f | wc -l)
log_message "${GREEN}[INFO] Total application backups retained: $BACKUP_COUNT${NC}"

# Update latest backup info
cat > "${BACKUP_BASE}/latest_app_backup_info.txt" << EOF
Latest Application Backup Information
====================================
Backup File: ${BACKUP_NAME}.tar.gz
Backup Date: $(date)
Backup Size: $BACKUP_SIZE
Total Backups: $BACKUP_COUNT
Status: SUCCESS
EOF

log_message "${GREEN}[COMPLETE] Application backup completed successfully${NC}" 