---
- name: Deploy Note-Taking Web App
  hosts: webservers
  become: yes
  vars_files:
    - vars.yml
    
  tasks:
    - name: Update system packages
      yum:
        name: "*"
        state: latest
      
    - name: Install required packages
      yum:
        name: "{{ required_packages }}"
        state: present
        
    - name: Create application directory
      file:
        path: "{{ app_dir }}"
        state: directory
        owner: "{{ app_user }}"
        group: "{{ app_group }}"
        mode: "{{ directory_mode }}"
        
    - name: Clone the application repository
      git:
        repo: "{{ repo_url }}"
        dest: "{{ app_dir }}"
        force: "{{ force_clone }}"
      become_user: "{{ app_user }}"
      
    - name: Install Python requirements
      pip:
        requirements: "{{ app_dir }}/requirements.txt"
        executable: "{{ pip_executable }}"
        
    - name: Make database setup script executable
      file:
        path: "{{ app_dir }}/{{ database_setup_script }}"
        mode: "{{ script_mode }}"
        
    - name: Setup database
      shell: "cd {{ app_dir }} && ./{{ database_setup_script }}"
      become_user: "{{ app_user }}"
      
    - name: Create systemd service file for the web app
      copy:
        dest: "/etc/systemd/system/{{ service_name }}.service"
        content: |
          [Unit]
          Description={{ service_description }}
          After=network.target
          
          [Service]
          Type=simple
          User={{ app_user }}
          WorkingDirectory={{ app_dir }}
          ExecStart={{ python_executable }} {{ app_dir }}/frontend.py
          Restart=always
          RestartSec=3
          Environment=FLASK_ENV={{ flask_env }}
          
          [Install]
          WantedBy=multi-user.target
          
    - name: Reload systemd daemon
      systemd:
        daemon_reload: yes
        
    - name: Enable and start the note app service
      systemd:
        name: "{{ service_name }}"
        enabled: "{{ enable_service }}"
        state: "{{ 'restarted' if restart_service else 'started' }}"
        
    - name: Open firewall for HTTP traffic
      firewalld:
        port: "{{ item }}"
        permanent: yes
        state: enabled
        immediate: yes
      loop: "{{ firewall_ports }}"
      ignore_errors: yes
      
    - name: Display service status
      systemd:
        name: noteapp
      register: service_status
      
    - name: Show deployment results
      debug:
        msg: |
          Deployment completed!
          Service status: {{ service_status.status.ActiveState }}
          Access your app at: http://98.84.54.112
          (Note: Make sure your EC2 security group allows HTTP traffic on port 80 or 5000)
