---
# Advanced Note-Taking App Deployment with Apache on Port 80
# Production-ready Flask app with Apache mod_wsgi

- name: Deploy Advanced Note-Taking App on Port 80
  hosts: noteapp_servers
  become: true
  gather_facts: true
  
  vars:
    app_user: "noteapp"
    app_dir: "/opt/noteapp"
    
  tasks:
    # 1. Install required packages including Apache and mod_wsgi
    - name: Install Python, SQLite, Apache and essential packages
      yum:
        name:
          - python3
          - python3-pip
          - python3-devel
          - sqlite
          - httpd
          - httpd-devel
          - gcc
        state: present
      
    # 2. Install mod_wsgi via pip
    - name: Install mod_wsgi via pip
      pip:
        name: mod_wsgi
        executable: pip3
        
    # 3. Configure mod_wsgi for Apache
    - name: Configure mod_wsgi module
      shell: mod_wsgi-express module-config
      register: mod_wsgi_config
      
    - name: Create mod_wsgi configuration file
      copy:
        content: "{{ mod_wsgi_config.stdout }}"
        dest: /etc/httpd/conf.modules.d/10-wsgi.conf
        owner: root
        group: root
        mode: '0644'
      notify: restart httpd
      
    # 4. Create application user
    - name: Create application user
      user:
        name: "{{ app_user }}"
        system: true
        home: "{{ app_dir }}"
        create_home: false
        shell: /bin/bash
        
    # 5. Create application directory
    - name: Create application directory
      file:
        path: "{{ app_dir }}"
        state: directory
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        mode: '0755'
        
    # 6. Copy Python application file
    - name: Copy advanced Python application
      copy:
        src: app.py
        dest: "{{ app_dir }}/app.py"
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        mode: '0755'
        
    # 7. Copy WSGI file
    - name: Copy WSGI file
      copy:
        src: app.wsgi
        dest: "{{ app_dir }}/app.wsgi"
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        mode: '0755'
        
    # 8. Copy requirements file
    - name: Copy requirements.txt
      copy:
        src: requirements.txt
        dest: "{{ app_dir }}/requirements.txt"
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        mode: '0644'
        
    # 9. Install Python requirements
    - name: Install Python requirements
      pip:
        requirements: "{{ app_dir }}/requirements.txt"
        executable: pip3
        
    # 10. Create Apache virtual host configuration
    - name: Create Apache virtual host configuration
      copy:
        content: |
          <VirtualHost *:80>
              ServerName {{ ansible_default_ipv4.address }}
              DocumentRoot {{ app_dir }}
              
              WSGIDaemonProcess noteapp user={{ app_user }} group={{ app_user }} threads=5 python-path={{ app_dir }}
              WSGIProcessGroup noteapp
              WSGIScriptAlias / {{ app_dir }}/app.wsgi
              
              <Directory {{ app_dir }}>
                  WSGIApplicationGroup %{GLOBAL}
                  Require all granted
              </Directory>
              
              # Logging
              ErrorLog /var/log/httpd/noteapp_error.log
              CustomLog /var/log/httpd/noteapp_access.log combined
              LogLevel info
              
              # Security headers
              Header always set X-Content-Type-Options nosniff
              Header always set X-Frame-Options DENY
              Header always set X-XSS-Protection "1; mode=block"
          </VirtualHost>
        dest: /etc/httpd/conf.d/noteapp.conf
        owner: root
        group: root
        mode: '0644'
      notify: restart httpd
      
    # 11. Configure firewall for HTTP (port 80)
    - name: Allow HTTP traffic on port 80
      firewalld:
        service: http
        permanent: true
        state: enabled
        immediate: true
      ignore_errors: true
      
    # 12. Set SELinux context for application files
    - name: Set SELinux context for application directory
      sefcontext:
        target: "{{ app_dir }}(/.*)?"
        setype: httpd_exec_t
        state: present
      ignore_errors: true
      
    - name: Apply SELinux context
      command: restorecon -R {{ app_dir }}
      ignore_errors: true
      
    # 13. Start and enable Apache
    - name: Start and enable Apache HTTP server
      systemd:
        name: httpd
        state: started
        enabled: true
        daemon_reload: true
        
    # 14. Check if Apache is serving the app
    - name: Wait for Apache to start
      wait_for:
        port: 80
        delay: 5
        timeout: 30
      ignore_errors: true
      
    # 15. Initialize database
    - name: Initialize database by calling the app
      uri:
        url: "http://{{ ansible_default_ipv4.address }}/health"
        method: GET
      register: health_check
      retries: 3
      delay: 5
      ignore_errors: true
      
  handlers:
    - name: restart httpd
      systemd:
        name: httpd
        state: restarted
        
  post_tasks:
    - name: Show deployment success
      debug:
        msg: |
          üéâ Advanced Note-Taking App Deployed Successfully on Port 80!
          
          ‚úÖ Application URL: http://{{ ansible_default_ipv4.address }}
          ‚úÖ Advanced Features: Search, Categories, Statistics, Export, API
          ‚úÖ Database: SQLite at {{ app_dir }}/notes.db
          ‚úÖ Web Server: Apache with mod_wsgi
          ‚úÖ Logs: /var/log/httpd/noteapp_*.log
          
          üöÄ API Endpoints:
          üìä Statistics: http://{{ ansible_default_ipv4.address }}/stats
          üì• Export: http://{{ ansible_default_ipv4.address }}/export
          üîç Health: http://{{ ansible_default_ipv4.address }}/health
          üì± API: http://{{ ansible_default_ipv4.address }}/api/notes 