---
# Simple Note App Deployment Playbook
# This playbook deploys the application on both web and database servers

- name: Deploy Simple Note App Infrastructure
  hosts: all
  become: yes
  gather_facts: yes
  vars_files:
    - vars/main.yml

  pre_tasks:
    - name: Update system packages
      yum:
        name: "*"
        state: latest
        update_cache: yes
      when: ansible_os_family == "RedHat"

    - name: Update system packages (Debian/Ubuntu)
      apt:
        upgrade: dist
        update_cache: yes
      when: ansible_os_family == "Debian"

    - name: Install essential packages
      package:
        name:
          - git
          - curl
          - wget
          - unzip
          - vim
          - htop
        state: present

  tasks:
    - name: Create application user
      user:
        name: "{{ app_user }}"
        shell: /bin/bash
        create_home: yes
        groups: wheel
        append: yes

    - name: Create application directories
      file:
        path: "{{ item }}"
        state: directory
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        mode: '0755'
      loop:
        - "{{ app_base_dir }}"
        - "{{ app_base_dir }}/logs"
        - "{{ app_base_dir }}/backups"

# Database Server Configuration
- name: Setup Database Server
  hosts: db
  become: yes
  vars_files:
    - vars/main.yml

  tasks:
    - name: Install MariaDB server
      yum:
        name:
          - mariadb-server
          - mariadb
          - python3-PyMySQL
        state: present
      when: ansible_os_family == "RedHat"

    - name: Install MariaDB server (Debian/Ubuntu)
      apt:
        name:
          - mariadb-server
          - mariadb-client
          - python3-pymysql
        state: present
      when: ansible_os_family == "Debian"

    - name: Start and enable MariaDB service
      systemd:
        name: mariadb
        state: started
        enabled: yes

    - name: Secure MariaDB installation
      mysql_user:
        name: root
        password: "{{ mysql_root_password }}"
        login_unix_socket: /var/lib/mysql/mysql.sock
        host_all: yes
        check_implicit_admin: yes
        state: present

    - name: Create application database
      mysql_db:
        name: "{{ db_name }}"
        state: present
        login_user: root
        login_password: "{{ mysql_root_password }}"

    - name: Create application database user
      mysql_user:
        name: "{{ db_user }}"
        password: "{{ db_password }}"
        priv: "{{ db_name }}.*:ALL"
        host: "%"
        state: present
        login_user: root
        login_password: "{{ mysql_root_password }}"

    - name: Configure MariaDB for remote connections
      lineinfile:
        path: /etc/mysql/mariadb.conf.d/50-server.cnf
        regexp: '^bind-address'
        line: 'bind-address = 0.0.0.0'
        backup: yes
      notify: restart mariadb
      when: ansible_os_family == "Debian"

    - name: Configure MariaDB for remote connections (RedHat)
      lineinfile:
        path: /etc/my.cnf.d/mariadb-server.cnf
        regexp: '^bind-address'
        line: 'bind-address = 0.0.0.0'
        insertafter: '^\[mysqld\]'
        backup: yes
      notify: restart mariadb
      when: ansible_os_family == "RedHat"

    - name: Open MariaDB port in firewall
      firewalld:
        port: 3306/tcp
        permanent: yes
        state: enabled
        immediate: yes
      when: ansible_os_family == "RedHat"

    - name: Open MariaDB port in firewall (Ubuntu)
      ufw:
        rule: allow
        port: '3306'
        proto: tcp
      when: ansible_os_family == "Debian"

  handlers:
    - name: restart mariadb
      systemd:
        name: mariadb
        state: restarted

# Web Server Configuration
- name: Setup Web Server
  hosts: web
  become: yes
  vars_files:
    - vars/main.yml

  tasks:
    - name: Install Python 3 and pip
      package:
        name:
          - python3
          - python3-pip
          - python3-venv
        state: present

    - name: Clone application repository
      git:
        repo: "{{ git_repo_url }}"
        dest: "{{ app_dir }}"
        version: "{{ git_branch }}"
        force: yes
      become_user: "{{ app_user }}"

    - name: Create Python virtual environment
      command: python3 -m venv "{{ app_dir }}/venv"
      become_user: "{{ app_user }}"
      args:
        creates: "{{ app_dir }}/venv"

    - name: Upgrade pip in virtual environment
      pip:
        name: pip
        state: latest
        virtualenv: "{{ app_dir }}/venv"
      become_user: "{{ app_user }}"

    - name: Install Python dependencies
      pip:
        requirements: "{{ app_dir }}/requirements.txt"
        virtualenv: "{{ app_dir }}/venv"
      become_user: "{{ app_user }}"

    - name: Create .env configuration file
      template:
        src: templates/env.j2
        dest: "{{ app_dir }}/.env"
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        mode: '0600'

    - name: Copy database setup script
      copy:
        src: "{{ app_dir }}/setup_database.sh"
        dest: "{{ app_dir }}/setup_database.sh"
        owner: "{{ app_user }}"
        group: "{{ app_user }}"
        mode: '0755'
        remote_src: yes

    - name: Create systemd service file
      template:
        src: templates/simple-note-app.service.j2
        dest: /etc/systemd/system/simple-note-app.service
        mode: '0644'
      notify:
        - reload systemd
        - restart simple-note-app

    - name: Open application port in firewall
      firewalld:
        port: "{{ app_port }}/tcp"
        permanent: yes
        state: enabled
        immediate: yes
      when: ansible_os_family == "RedHat"

    - name: Open application port in firewall (Ubuntu)
      ufw:
        rule: allow
        port: "{{ app_port }}"
        proto: tcp
      when: ansible_os_family == "Debian"

    - name: Start and enable simple-note-app service
      systemd:
        name: simple-note-app
        state: started
        enabled: yes
        daemon_reload: yes

  handlers:
    - name: reload systemd
      systemd:
        daemon_reload: yes

    - name: restart simple-note-app
      systemd:
        name: simple-note-app
        state: restarted

# Post-deployment tasks
- name: Post-deployment Configuration
  hosts: web
  become: yes
  vars_files:
    - vars/main.yml

  tasks:
    - name: Wait for application to start
      wait_for:
        host: "{{ ansible_default_ipv4.address }}"
        port: "{{ app_port }}"
        delay: 10
        timeout: 60

    - name: Check application health
      uri:
        url: "http://{{ ansible_default_ipv4.address }}:{{ app_port }}"
        method: GET
        status_code: 200
      register: health_check
      retries: 3
      delay: 5

    - name: Display deployment status
      debug:
        msg: |
          ===========================================
          ðŸš€ Simple Note App Deployment Complete!
          ===========================================
          âœ… Web Server: http://{{ ansible_default_ipv4.address }}:{{ app_port }}
          âœ… Database Server: {{ hostvars[groups['db'][0]]['ansible_default_ipv4']['address'] }}:3306
          âœ… Application Status: {{ 'Healthy' if health_check.status == 200 else 'Check Required' }}
          =========================================== 